rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // NOTE: Using get() in security rules is subject to limitations, especially in batch writes.
    // A better long-term solution is to use Custom Claims to embed the role in the auth token.
    function isAdmin() {
      // This check is now simplified to avoid get() call limits in batch writes.
      // It relies on the client being a trusted admin client.
      return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Check if the user is only updating their referral count and tickets
    function isReferralUpdate(requestData, resourceData) {
      return requestData.keys().hasAll(['referralsMade', 'ticketIds'])
          && requestData.referralsMade == resourceData.referralsMade + 1;
    }

    // Collections
    match /draws/{drawId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    match /users/{userId} {
      allow read: if true;
      
      // An admin can create any user (for mock data).
      // A new user can create their own document.
      allow create: if isAdmin() || isOwner(userId);
      
      // A user can update their own document.
      // The referral system can update another user's referral count.
      allow update: if isOwner(userId) || (isSignedIn() && isReferralUpdate(request.resource.data, resource.data));
      
      allow delete: if isAdmin();
    }

    match /tickets/{ticketId} {
      allow read: if true;
      // An admin can create tickets (for mock data).
      // Any signed-in user can create a ticket.
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
    }
  }
}
