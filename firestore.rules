rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions for re-usability and clarity
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Check if the user making the request has the 'admin' role in their own user document.
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isReferralUpdate() {
      // Allow updates only to 'referralsMade' and 'ticketIds' fields for referral logic.
      // This ensures a user can't change another user's name, phone, etc.
      let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return changedKeys.hasOnly(['referralsMade', 'ticketIds']);
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone can read user profiles (to see winner names, etc.).
      allow read: if true;
      
      // A user can be created if the request is from a signed-in user (covers registration)
      // OR if the request is from an admin (covers mock data generation).
      allow create: if isSignedIn();
      
      // A user can update a document if they are the owner,
      // OR if it's a valid referral update,
      // OR if they are an admin.
      allow update: if (isSignedIn() && isOwner(userId)) || (isSignedIn() && isReferralUpdate()) || isAdmin();
      
      // Only admins can delete users.
      allow delete: if isAdmin();
    }

    // Rules for the 'draws' collection
    match /draws/{drawId} {
      // Anyone can view draws.
      allow read: if true;

      // Only admins can create, update, or delete draws.
      allow write: if isAdmin();
    }

    // Rules for the 'tickets' collection
    match /tickets/{ticketId} {
      // Anyone can view any ticket (to see all numbers during announcement).
      allow read: if true;
      
      // A ticket can be created if the user is signed in (for purchasing)
      // OR if an admin is creating it (for mock data).
      allow create: if isSignedIn();

      // No one should be able to update or delete a ticket once it's created.
      allow update, delete: if false;
    }
  }
}