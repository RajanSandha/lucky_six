
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // In a real app, this should check a custom claim or a field in the user's doc.
      // For now, we assume no one is an admin by default for security.
      // return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      return false; 
    }

    // Users can be read publicly (only non-sensitive fields)
    // but only the owner can write to their own document.
    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow create: if !exists(/databases/$(database)/documents/users/$(userId)); // Anyone can create a user doc (register)
      allow update: if isOwner(userId) && !("role" in request.resource.data); // User can update their data, but cannot change their role.
      allow delete: if isAdmin();
    }

    // Draws can be read by anyone. Only admins can create/update/delete them.
    match /draws/{drawId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
      
      // Public announcements subcollection can be read by anyone.
      // Only the backend (via admin SDK) should write here, so we deny client writes.
      match /publicAnnouncements/{announcementId} {
        allow read: if true;
        allow write: if false; // Deny all client writes
      }
    }
    

    // Tickets can only be created by the user who owns them.
    // Reading tickets should be restricted.
    match /tickets/{ticketId} {
      allow read: if isOwner(request.resource.data.userId) || isAdmin();
      // Allow create if user is authenticated and is creating a ticket for themselves.
      allow create: if isUserAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAdmin();
    }
  }
}
